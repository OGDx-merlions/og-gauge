{"version":3,"sources":["og-gauge.es6.js"],"names":["Polymer","is","properties","width","type","Number","value","height","innerRadius","outerRadius","observer","notify","thresholds","Array","currentValue","currentValueTitle","String","_valueChanged","newVal","oldVal","undefined","draw","updateNewGaugeValue","d3","Px","set","svg","select","$","viz","append","attr","totalParts","reduce","sum","val","parts","transformer","d","r","arc","padAngle","pie","startAngle","Math","PI","endAngle","sort","arcs","selectAll","data","enter","style","i","color","needle","currentPos","transition","ease","easeElasticOut","duration"],"mappings":"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","file":"og-gauge.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'og-gauge',\n\n    properties: {\n      /**\n      * Width of the Gauge (Number)\n      *\n      * @property width\n      */\n      width: {\n        type: Number,\n        value: 150\n      },\n      /**\n      * Height of the Gauge (Number)\n      *\n      * @property height\n      */\n      height: {\n        type: Number,\n        value: 125\n      },\n      /**\n      * Inner Radius of the Gauge (Number)\n      *\n      * @property innerRadius\n      */\n      innerRadius: {\n        type: Number,\n        value: 28\n      },\n      /**\n      * Outer Radius of the Gauge (Number)\n      *\n      * @property outerRadius\n      */\n      outerRadius: {\n        type: Number,\n        value: 55\n      },\n      /**\n      * Initial Value of the Gauge pointer (Number).\n      *\n      * @property value\n      */\n      value: {\n        type: Number,\n        observer: '_valueChanged',\n        notify: true\n      },\n      /**\n      * Thresholds to show value ranges in different colors\n      *\n      * @property thresholds\n      */\n      thresholds: {\n        type: Array,\n        notify: true,\n        value: function() {\n          return [];\n        }\n      },\n      /**\n      * Current value for the Solid Pointer (Number). Defaults to `value`\n      *\n      * @property currentValue\n      */\n      currentValue: {\n        type: Number\n      },\n      /**\n      * Title for Current Value\n      *\n      * @property currentValueTitle\n      */\n      currentValueTitle: {\n        type: String,\n        value: \"Current\"\n      }\n    },\n    _valueChanged: function(newVal, oldVal) {\n      if(oldVal === undefined) {\n        this.draw();\n      } else {\n        this.updateNewGaugeValue();\n      }\n    },\n    draw: function() {\n      var d3 = Px.d3;\n      // set the dimensions and margins of the graph\n      var width = +this.width,\n          height = +this.height;\n      if(!this.currentValue) {\n        this.set(\"currentValue\", this.value);\n      }\n      if(!this.svg) {\n        this.svg = d3.select(this.$.viz).append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n      }\n\n      var innerRadius = this.innerRadius,\n          outerRadius = this.outerRadius;\n\n      var thresholds = this.thresholds;\n\n      var value = this.value;\n\n      var totalParts = thresholds.reduce(function(sum, val) {\n        return sum + val.parts;\n      }, 0);\n\n      if(value > totalParts) {\n        value = totalParts;\n      }\n\n      this.transformer = function(d) {\n        var r = 180 * d / totalParts;\n        return \"translate(\"+width/2 + \",\" + height/2 +\") rotate(\" + r + \")\";\n      };\n      var transformer = this.transformer;\n\n      var svg = this.svg;\n\n      this.arc = d3.arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .padAngle(0);\n\n      this.pie = d3.pie()\n        .startAngle(-Math.PI / 2)\n        .endAngle(Math.PI / 2)\n        .sort(null)\n        .value(function(d) {\n          return d.parts;\n        });\n\n      this.arcs = svg.selectAll('.arc')\n        .data(this.pie(thresholds))\n        .enter()\n        .append('path')\n        .attr(\"d\", this.arc)\n        .attr(\"transform\", \"translate(\"+width/2 + \",\" + height/2 +\")\")\n        .style(\"fill\", function(d, i) {\n          return d.data.color;\n        });\n\n      this.needle = svg.selectAll(\".needle\")\n        .data([value])\n        .enter()\n        .append('polygon')\n        .attr(\"x\", 0)\n        .attr(\"y\", 0)\n        .attr(\"points\", \"0,3 \"+ (-8-outerRadius) +\",0 0,0\")\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", 1)\n        .style(\"fill\", \"transparent\")\n        .style(\"stroke-dasharray\", \"1,1\")\n        .attr(\"transform\", transformer);\n\n      this.currentPos = svg.selectAll(\".currentPos\")\n        .data([value])\n        .enter()\n        .append('line')\n        .attr(\"x1\", 0)\n        .attr(\"x2\", (2-outerRadius))\n        .attr(\"y1\", 0)\n        .attr(\"y2\", 0)\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", 1)\n        //.style(\"stroke-dasharray\", \"5,5\")\n        .attr(\"transform\", transformer);\n    },\n    updateNewGaugeValue: function() {\n      var d3 = Px.d3;\n      this.arcs.data(this.pie(this.thresholds))\n        .transition()\n        .attr(\"d\", this.arc)\n      this.needle.data([this.value])\n        .transition()\n        .ease(d3.easeElasticOut)\n        .duration(2000)\n        .attr(\"transform\", this.transformer);\n    }\n  });\n\n})();\n"]}